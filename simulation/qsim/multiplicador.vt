// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/04/2018 19:41:44"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    multiplicador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module multiplicador_vlg_sample_tst(
	A,
	B,
	C,
	DD,
	DU,
	R,
	S,
	Sc1,
	Sc2,
	sampler_tx
);
input [2:0] A;
input [2:0] B;
input [5:1] C;
input [6:0] DD;
input [6:0] DU;
input [8:0] R;
input [5:0] S;
input  Sc1;
input  Sc2;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or C or DD or DU or R or S or Sc1 or Sc2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module multiplicador_vlg_check_tst (
	C,
	DD,
	DU,
	R,
	S,
	Sc1,
	Sc2,
	sampler_rx
);
input [5:1] C;
input [6:0] DD;
input [6:0] DU;
input [8:0] R;
input [5:0] S;
input  Sc1;
input  Sc2;
input sampler_rx;

reg [5:1] C_expected;
reg [6:0] DD_expected;
reg [6:0] DU_expected;
reg [8:0] R_expected;
reg [5:0] S_expected;
reg  Sc1_expected;
reg  Sc2_expected;

reg [5:1] C_prev;
reg [6:0] DD_prev;
reg [6:0] DU_prev;
reg [8:0] R_prev;
reg [5:0] S_prev;
reg  Sc1_prev;
reg  Sc2_prev;

reg [6:0] DD_expected_prev;
reg [6:0] DU_expected_prev;
reg [5:0] S_expected_prev;

reg [6:0] last_DD_exp;
reg [6:0] last_DU_exp;
reg [5:0] last_S_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	C_prev = C;
	DD_prev = DD;
	DU_prev = DU;
	R_prev = R;
	S_prev = S;
	Sc1_prev = Sc1;
	Sc2_prev = Sc2;
end

// update expected /o prevs

always @(trigger)
begin
	DD_expected_prev = DD_expected;
	DU_expected_prev = DU_expected;
	S_expected_prev = S_expected;
end


// generate trigger
always @(C_expected or C or DD_expected or DD or DU_expected or DU or R_expected or R or S_expected or S or Sc1_expected or Sc1 or Sc2_expected or Sc2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected C = %b | expected DD = %b | expected DU = %b | expected R = %b | expected S = %b | expected Sc1 = %b | expected Sc2 = %b | ",C_expected_prev,DD_expected_prev,DU_expected_prev,R_expected_prev,S_expected_prev,Sc1_expected_prev,Sc2_expected_prev);
	$display("| real C = %b | real DD = %b | real DU = %b | real R = %b | real S = %b | real Sc1 = %b | real Sc2 = %b | ",C_prev,DD_prev,DU_prev,R_prev,S_prev,Sc1_prev,Sc2_prev);
`endif
	if (
		( DD_expected_prev[0] !== 1'bx ) && ( DD_prev[0] !== DD_expected_prev[0] )
		&& ((DD_expected_prev[0] !== last_DD_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DD[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DD_expected_prev);
		$display ("     Real value = %b", DD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DD_exp[0] = DD_expected_prev[0];
	end
	if (
		( DD_expected_prev[1] !== 1'bx ) && ( DD_prev[1] !== DD_expected_prev[1] )
		&& ((DD_expected_prev[1] !== last_DD_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DD[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DD_expected_prev);
		$display ("     Real value = %b", DD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DD_exp[1] = DD_expected_prev[1];
	end
	if (
		( DD_expected_prev[2] !== 1'bx ) && ( DD_prev[2] !== DD_expected_prev[2] )
		&& ((DD_expected_prev[2] !== last_DD_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DD[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DD_expected_prev);
		$display ("     Real value = %b", DD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DD_exp[2] = DD_expected_prev[2];
	end
	if (
		( DD_expected_prev[3] !== 1'bx ) && ( DD_prev[3] !== DD_expected_prev[3] )
		&& ((DD_expected_prev[3] !== last_DD_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DD[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DD_expected_prev);
		$display ("     Real value = %b", DD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DD_exp[3] = DD_expected_prev[3];
	end
	if (
		( DD_expected_prev[4] !== 1'bx ) && ( DD_prev[4] !== DD_expected_prev[4] )
		&& ((DD_expected_prev[4] !== last_DD_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DD[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DD_expected_prev);
		$display ("     Real value = %b", DD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DD_exp[4] = DD_expected_prev[4];
	end
	if (
		( DD_expected_prev[5] !== 1'bx ) && ( DD_prev[5] !== DD_expected_prev[5] )
		&& ((DD_expected_prev[5] !== last_DD_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DD[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DD_expected_prev);
		$display ("     Real value = %b", DD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DD_exp[5] = DD_expected_prev[5];
	end
	if (
		( DD_expected_prev[6] !== 1'bx ) && ( DD_prev[6] !== DD_expected_prev[6] )
		&& ((DD_expected_prev[6] !== last_DD_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DD[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DD_expected_prev);
		$display ("     Real value = %b", DD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DD_exp[6] = DD_expected_prev[6];
	end
	if (
		( DU_expected_prev[0] !== 1'bx ) && ( DU_prev[0] !== DU_expected_prev[0] )
		&& ((DU_expected_prev[0] !== last_DU_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DU[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DU_expected_prev);
		$display ("     Real value = %b", DU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DU_exp[0] = DU_expected_prev[0];
	end
	if (
		( DU_expected_prev[1] !== 1'bx ) && ( DU_prev[1] !== DU_expected_prev[1] )
		&& ((DU_expected_prev[1] !== last_DU_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DU[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DU_expected_prev);
		$display ("     Real value = %b", DU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DU_exp[1] = DU_expected_prev[1];
	end
	if (
		( DU_expected_prev[2] !== 1'bx ) && ( DU_prev[2] !== DU_expected_prev[2] )
		&& ((DU_expected_prev[2] !== last_DU_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DU[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DU_expected_prev);
		$display ("     Real value = %b", DU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DU_exp[2] = DU_expected_prev[2];
	end
	if (
		( DU_expected_prev[3] !== 1'bx ) && ( DU_prev[3] !== DU_expected_prev[3] )
		&& ((DU_expected_prev[3] !== last_DU_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DU[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DU_expected_prev);
		$display ("     Real value = %b", DU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DU_exp[3] = DU_expected_prev[3];
	end
	if (
		( DU_expected_prev[4] !== 1'bx ) && ( DU_prev[4] !== DU_expected_prev[4] )
		&& ((DU_expected_prev[4] !== last_DU_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DU[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DU_expected_prev);
		$display ("     Real value = %b", DU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DU_exp[4] = DU_expected_prev[4];
	end
	if (
		( DU_expected_prev[5] !== 1'bx ) && ( DU_prev[5] !== DU_expected_prev[5] )
		&& ((DU_expected_prev[5] !== last_DU_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DU[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DU_expected_prev);
		$display ("     Real value = %b", DU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DU_exp[5] = DU_expected_prev[5];
	end
	if (
		( DU_expected_prev[6] !== 1'bx ) && ( DU_prev[6] !== DU_expected_prev[6] )
		&& ((DU_expected_prev[6] !== last_DU_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DU[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DU_expected_prev);
		$display ("     Real value = %b", DU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DU_exp[6] = DU_expected_prev[6];
	end
	if (
		( S_expected_prev[0] !== 1'bx ) && ( S_prev[0] !== S_expected_prev[0] )
		&& ((S_expected_prev[0] !== last_S_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_S_exp[0] = S_expected_prev[0];
	end
	if (
		( S_expected_prev[1] !== 1'bx ) && ( S_prev[1] !== S_expected_prev[1] )
		&& ((S_expected_prev[1] !== last_S_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_S_exp[1] = S_expected_prev[1];
	end
	if (
		( S_expected_prev[2] !== 1'bx ) && ( S_prev[2] !== S_expected_prev[2] )
		&& ((S_expected_prev[2] !== last_S_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_S_exp[2] = S_expected_prev[2];
	end
	if (
		( S_expected_prev[3] !== 1'bx ) && ( S_prev[3] !== S_expected_prev[3] )
		&& ((S_expected_prev[3] !== last_S_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_S_exp[3] = S_expected_prev[3];
	end
	if (
		( S_expected_prev[4] !== 1'bx ) && ( S_prev[4] !== S_expected_prev[4] )
		&& ((S_expected_prev[4] !== last_S_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_S_exp[4] = S_expected_prev[4];
	end
	if (
		( S_expected_prev[5] !== 1'bx ) && ( S_prev[5] !== S_expected_prev[5] )
		&& ((S_expected_prev[5] !== last_S_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_S_exp[5] = S_expected_prev[5];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module multiplicador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] A;
reg [2:0] B;
reg [5:1] treg_C;
reg [6:0] treg_DD;
reg [6:0] treg_DU;
reg [8:0] treg_R;
reg [5:0] treg_S;
reg treg_Sc1;
reg treg_Sc2;
// wires                                               
wire [5:1] C;
wire [6:0] DD;
wire [6:0] DU;
wire [8:0] R;
wire [5:0] S;
wire Sc1;
wire Sc2;

wire sampler;                             

// assign statements (if any)                          
assign C = treg_C;
assign DD = treg_DD;
assign DU = treg_DU;
assign R = treg_R;
assign S = treg_S;
assign Sc1 = treg_Sc1;
assign Sc2 = treg_Sc2;
multiplicador i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.DD(DD),
	.DU(DU),
	.R(R),
	.S(S),
	.Sc1(Sc1),
	.Sc2(Sc2)
);

// A[2]
initial
begin
	A[2] = 1'b1;
	A[2] = #30000 1'b0;
	A[2] = #90000 1'b1;
	A[2] = #90000 1'b0;
end 

// A[1]
initial
begin
	A[1] = 1'b1;
	A[1] = #30000 1'b0;
	A[1] = #30000 1'b1;
	A[1] = #60000 1'b0;
	A[1] = #30000 1'b1;
	A[1] = #30000 1'b0;
end 

// A[0]
initial
begin
	A[0] = 1'b1;
	A[0] = #60000 1'b0;
	A[0] = #30000 1'b1;
	A[0] = #30000 1'b0;
	A[0] = #60000 1'b1;
	A[0] = #30000 1'b0;
end 

// B[2]
initial
begin
	B[2] = 1'b1;
	B[2] = #220000 1'b0;
end 

// B[1]
initial
begin
	B[1] = 1'b1;
	B[1] = #220000 1'b0;
end 

// B[0]
initial
begin
	B[0] = 1'b1;
	B[0] = #220000 1'b0;
end 

// S[5]
initial
begin
	treg_S[5] = 1'bZ;
end 

// S[4]
initial
begin
	treg_S[4] = 1'bZ;
end 

// S[3]
initial
begin
	treg_S[3] = 1'bZ;
end 

// S[2]
initial
begin
	treg_S[2] = 1'bZ;
end 

// S[1]
initial
begin
	treg_S[1] = 1'bZ;
end 

// S[0]
initial
begin
	treg_S[0] = 1'bZ;
end 
// DD[ 6 ]
initial
begin
	treg_DD[6] = 1'bZ;
end 
// DD[ 5 ]
initial
begin
	treg_DD[5] = 1'bZ;
end 
// DD[ 4 ]
initial
begin
	treg_DD[4] = 1'bZ;
end 
// DD[ 3 ]
initial
begin
	treg_DD[3] = 1'bZ;
end 
// DD[ 2 ]
initial
begin
	treg_DD[2] = 1'bZ;
end 
// DD[ 1 ]
initial
begin
	treg_DD[1] = 1'bZ;
end 
// DD[ 0 ]
initial
begin
	treg_DD[0] = 1'bZ;
end 
// DU[ 6 ]
initial
begin
	treg_DU[6] = 1'bZ;
end 
// DU[ 5 ]
initial
begin
	treg_DU[5] = 1'bZ;
end 
// DU[ 4 ]
initial
begin
	treg_DU[4] = 1'bZ;
end 
// DU[ 3 ]
initial
begin
	treg_DU[3] = 1'bZ;
end 
// DU[ 2 ]
initial
begin
	treg_DU[2] = 1'bZ;
end 
// DU[ 1 ]
initial
begin
	treg_DU[1] = 1'bZ;
end 
// DU[ 0 ]
initial
begin
	treg_DU[0] = 1'bZ;
end 

multiplicador_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.C(C),
	.DD(DD),
	.DU(DU),
	.R(R),
	.S(S),
	.Sc1(Sc1),
	.Sc2(Sc2),
	.sampler_tx(sampler)
);

multiplicador_vlg_check_tst tb_out(
	.C(C),
	.DD(DD),
	.DU(DU),
	.R(R),
	.S(S),
	.Sc1(Sc1),
	.Sc2(Sc2),
	.sampler_rx(sampler)
);
endmodule

